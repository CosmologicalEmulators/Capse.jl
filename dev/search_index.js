var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Capse.CℓEmulator\nCapse.get_Cℓ\nCapse.get_ℓgrid\nCapse.get_emulator_description\nCapse.load_emulator","category":"page"},{"location":"api/#Capse.CℓEmulator","page":"API","title":"Capse.CℓEmulator","text":"CℓEmulator(TrainedEmulator::AbstractTrainedEmulators, ℓgrid::Array,\nInMinMax::Matrix, OutMinMax::Matrix)\n\nThis is the fundamental struct used to obtain the C_ell's from an emulator. It contains:\n\nTrainedEmulator::AbstractTrainedEmulators, the trained emulator\nℓgrid::AbstractVector, the ell-grid the emulator has been trained on.\nInMinMax::AbstractMatrix, the Matrix used for the MinMax normalization of the input features\nOutMinMax::AbstractMatrix, the Matrix used for the MinMax normalization of the output features\nPostprocessing::Function, the Function used for the postprocessing of the NN output\n\n\n\n\n\n","category":"type"},{"location":"api/#Capse.get_Cℓ","page":"API","title":"Capse.get_Cℓ","text":"get_Cℓ(input_params, Cℓemu::AbstractCℓEmulators)\n\nComputes and returns the C_ell's on the ell-grid the emulator has been trained on given input array input_params.\n\n\n\n\n\n","category":"function"},{"location":"api/#Capse.get_ℓgrid","page":"API","title":"Capse.get_ℓgrid","text":"get_ℓgrid(CℓEmulator::AbstractCℓEmulators)\n\nReturns the ell-grid the emulator has been trained on.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractCosmologicalEmulators.get_emulator_description","page":"API","title":"AbstractCosmologicalEmulators.get_emulator_description","text":"get_emulator_description(Cℓemu::AbstractCℓEmulators)\n\nPrint on screen the emulator description.\n\n\n\n\n\n","category":"function"},{"location":"api/#Capse.load_emulator","page":"API","title":"Capse.load_emulator","text":"load_emulator(path::String, emu_backend::AbstractTrainedEmulators)\n\nLoad the emulator with the files in the folder path, using the backend defined by emu_backend. The following keyword arguments are used to specify the name of the files used to load the emulator:\n\nℓ_file, default l.npy\nweights_file, default weights.npy\ninminmax_file, default inminmax.npy\noutminmax_file, default outminmax.npy\nnn_setup_file, default nn_setup.json\npostprocessing_file, default postprocessing.jl\n\nIf the corresponding file in the folder you are trying to load have different names,  change the default values accordingly.\n\n\n\n\n\n","category":"function"},{"location":"#Capse.jl","page":"Home","title":"Capse.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Plots; gr()\nPlots.reset_defaults()\nusing JSON\nusing BenchmarkTools\nusing NPZ\nusing Capse\nusing SimpleChains\n\nmlpd = SimpleChain(\n  static(6),\n  TurboDense(tanh, 64),\n  TurboDense(tanh, 64),\n  TurboDense(tanh, 64),\n  TurboDense(tanh, 64),\n  TurboDense(tanh, 64),\n  TurboDense(identity, 4999)\n)\n\ndefault(palette = palette(:tab10))\nbenchmark = BenchmarkTools.load(\"./assets/capse_benchmark.json\")\npath_json = \"./assets/nn_setup.json\"\npath_data = \"./assets/\"\nweights = rand(500000)\nℓgrid = ones(2000)\nInMinMax_array = zeros(2,2000)\nOutMinMax_array = zeros(2,2000)\nnn_setup = JSON.parsefile(path_json)\nemu = Capse.SimpleChainsEmulator(Architecture = mlpd, Weights = weights,\n                                 Description = nn_setup)\npostprocessing(input, output, Cℓemu) = output .* exp(input[1]-3.)\nCℓ_emu = Capse.CℓEmulator(TrainedEmulator = emu, ℓgrid=ℓgrid, InMinMax = InMinMax_array,\n                                OutMinMax = OutMinMax_array,\n                                Postprocessing = postprocessing)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Capse.jl is a Julia package designed to emulate the computation of the CMB Angular Power Spectrum, with a speedup of several orders of magnitude compared to standard codes such as CAMB or CLASS. The core functionalities of Capse.jl are inherithed by the upstream library AbstractCosmologicalEmulators.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to install  Capse.jl, run on the Julia REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg, Pkg.add(url=\"https://github.com/CosmologicalEmulators/Capse.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to be able to use Capse.jl, there two major steps that need to be performed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instantiating the emulators, e.g. initializing the Neural Network, its weight and biases and the quantities employed in pre and post-processing\nUse the instantiated emulators to retrieve the spectra","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the reminder of this section we are showing how to do this.","category":"page"},{"location":"#Instantiation","page":"Home","title":"Instantiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The most direct way to instantiate an official trained emulators is given by the following one-liner","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cℓ_emu = Capse.load_emulator(weights_folder);","category":"page"},{"location":"","page":"Home","title":"Home","text":"where weights_folder is the path to the folder containing the files required to build up the network. Some of the trained emulators can be found on Zenodo and we plan to release more of them there in the future.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is possible to pass an additional argument to the previous function, which is used to choose between the two NN backend now available:","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains, which is taylored for small NN running on a CPU\nLux, which can run both on CPUs and GPUs","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains.jl is faster expecially for small NN on the CPU. If you wanna use something running on a GPU, you should use Lux.jl, which can be loaded adding an additional argument to the load_emulator function, Capse.LuxEmulator","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cℓ_emu = Capse.load_emulator(weights_folder, emu = Capse.LuxEmulator);","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each trained emulator should be shipped with a description within the JSON file. In order to print the description, just runs:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Capse.get_emulator_description(Cℓ_emu)","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nCosmological parameters must be fed to Capse.jl with arrays. It is the user responsability to check the right ordering, by reading the output of the get_emulator_description method.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After loading a trained emulator, feed it some input parameters x in order to get the emulated C_ell's","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = rand(6) # generate some random input\nCapse.get_Cℓ(x, Cℓ_emu) #compute the Cℓ's","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using SimpleChains.jl, we obtain a mean execution time of 45 microseconds","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchmark[1][\"Capse\"][\"SimpleChains\"] # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using Lux.jl, with the same architecture and weights, we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchmark[1][\"Capse\"][\"Lux\"] # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lux.jl is around 20% slower than SimpleChains.jl and they give the same result up to floating point precision.","category":"page"},{"location":"","page":"Home","title":"Home","text":"These benchmarks have been performed locally, with a 13th Gen Intel® Core™ i7-13700H.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Considering that a high-precision settings calculation performed with CAMB on the same machine requires around 60 seconds, Capse.jl is 5-6 order of magnitudes faster.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Marco Bonici, PostDoctoral researcher at Waterloo Center for Astrophysics\nFederico Bianchini, PostDoctoral researcher at Stanford\nJaime Ruiz-Zapatero, PhD Student at Oxford\nMarius Millea, Researcher at UC Davis and Berkeley Center for Cosmological Physics","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please make sure to update tests as appropriate.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Capse.jl is licensed under the MIT \"Expat\" license; see LICENSE for the full license text.","category":"page"}]
}
