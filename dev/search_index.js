var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Capse.CℓEmulator\nCapse.get_Cℓ\nCapse.get_ℓgrid","category":"page"},{"location":"api/#Capse.CℓEmulator","page":"API","title":"Capse.CℓEmulator","text":"CℓEmulator(TrainedEmulator::AbstractTrainedEmulators, ℓgrid::Array,\nInMinMax::Matrix, OutMinMax::Matrix)\n\nThis is the fundamental struct used to obtain the C_ell's from an emulator. It contains:\n\nTrainedEmulator::AbstractTrainedEmulators, the trained emulator\nℓgrid::AbstractVector, the ell-grid the emulator has been trained on.\nInMinMax::AbstractMatrix, the Matrix used for the MinMax normalization of the input features\nOutMinMax::AbstractMatrix, the Matrix used for the MinMax normalization of the output features\n\n\n\n\n\n","category":"type"},{"location":"api/#Capse.get_Cℓ","page":"API","title":"Capse.get_Cℓ","text":"get_Cℓ(CℓEmulator::AbstractCℓEmulators)\n\nComputes and returns the C_ellon the ell-grid the emulator has been trained on.\n\n\n\n\n\n","category":"function"},{"location":"api/#Capse.get_ℓgrid","page":"API","title":"Capse.get_ℓgrid","text":"get_ℓgrid(CℓEmulator::AbstractCℓEmulators)\n\nReturns the ell-grid the emulator has been trained on.\n\n\n\n\n\n","category":"function"},{"location":"#Capse.jl","page":"Home","title":"Capse.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Plots; gr()\nPlots.reset_defaults()\nusing JSON\nusing BenchmarkTools\nusing NPZ\nusing Capse\ndefault(palette = palette(:tab10))\nbenchmark = BenchmarkTools.load(\"./assets/capse_benchmark.json\")\npath_json = \"./assets/nn_setup.json\"\npath_data = \"./assets/\"\nweights = rand(20000)\nℓgrid = ones(2000)\nInMinMax_array = zeros(2,2000)\nOutMinMax_array = zeros(2,2000)\nnpzwrite(\"./assets/l.npy\", ℓgrid)\nnpzwrite(\"./assets/weights.npy\", weights)\nnpzwrite(\"./assets/inminmax.npy\", InMinMax_array)\nnpzwrite(\"./assets/outminmax.npy\", OutMinMax_array)\nweights_folder = \"./assets/\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Capse.jl is a Julia package designed to emulate the computation of the CMB Angular Power Spectrum, with a speedup of several orders of magnitude.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to install  Capse.jl, run on the Julia REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg, Pkg.add(url=\"https://github.com/CosmologicalEmulators/Capse.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to be able to use Capse.jl, there two major steps that need to be performed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instantiating the emulators, e.g. initializing the Neural Network, its weight and biases and the quantities employed in pre and post-processing\nUse the instantiated emulators to retrieve the spectra","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the reminder of this section we are showing how this can be done.","category":"page"},{"location":"#Instantiation","page":"Home","title":"Instantiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The most direct way to instantiate an official trained emulators is given by the following one-liner","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cℓ_emu = Capse.load_emulator(weights_folder)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where weights_folder is the path to the folder containing the files required to build up the network. Some of the trained emulators can be found on Zenodo and we plan to release more of them there in the future.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is possible to pass an additional argument to the previous function, which is used to choose between the two NN backed now available:","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains, which is taylored for small NN running on a CPU\nLux, which can run on a GPU","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains.jl is faster expecially for small NN on the CPU. If you prefer to use Lux.jl, pass as last argument Capse.LuxEmulator. The former is the default value, so need to specify it. For the latter, just add Capse.LuxEmulator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each trained emulator should be shipped with a description within the JSON file. In order to print the description, just runs:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Capse.get_emulator_description(Cℓ_emu)","category":"page"},{"location":"","page":"Home","title":"Home","text":"After loading a trained emulator, feed it some input parameters x in order to get the emulated C_ell's","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = rand(6) # generate some random input\nCapse.get_Cℓ(x, Cℓ_emu) #compute the Cℓ's","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nIn this moment the API is not stable: we need to pass the input cosmological parameters in an hardcoded way. We are working to add a more stable and flexible API.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using SimpleChains.jl, we obtain a mean execution time of 45 microseconds","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchmark[1][\"Capse\"][\"SimpleChains\"] # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using Lux.jl, with the same architecture and weights, we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchmark[1][\"Capse\"][\"Lux\"] # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains is about 2 times faster than Lux and they give the same result up to floating point precision.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This benchmarks have been performed locally, with a 12th Gen Intel® Core™ i7-1260P.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Considering that a high-precision settings calculation performed with CAMB on the same machine requires around 60 seconds, Capse.jl is around 1000000 times faster.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Marco Bonici, INAF - Institute of Space Astrophysics and Cosmic Physics (IASF), Milano\nFederico Bianchini, PostDoctoral researcher at Stanford\nJaime Ruiz-Zapatero, PhD Student at Oxford","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please make sure to update tests as appropriate.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Capse.jl is licensed under the MIT \"Expat\" license; see LICENSE for the full license text.","category":"page"}]
}
